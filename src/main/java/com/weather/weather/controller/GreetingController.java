package com.weather.weather.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.weather.weather.model.Models.City.City;
import com.weather.weather.model.Models.Weather.*;
import com.weather.weather.model.Repositories.CitiesRepository;
import com.weather.weather.model.Repositories.ConditionsRepository;
import com.weather.weather.model.Repositories.EmbeddRepository;
import com.weather.weather.model.Repositories.WeatherJSONRepository;
import com.weather.weather.model.Service.CitiesService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.io.IOException;
import java.util.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Controller
public class GreetingController {

    private static final Logger logger = LoggerFactory.getLogger(GreetingController.class);
    /*    @Autowired // This means to get the bean called userRepository
        // Which is auto-generated by Spring, we will use it to handle the data
        private CitiesRepository citiesRepository;*/
    @Autowired
    CitiesService citiesService;
    @Autowired
    private ConditionsRepository conditionsRepository;
    @Autowired
    private EmbeddRepository embeddRepository;
    @Autowired
    protected WeatherJSONRepository weatherJSONRepository;

    private final RestTemplate restTemplate;

    public GreetingController(RestTemplateBuilder restTemplateBuilder) {
        this.restTemplate = restTemplateBuilder.build();
    }

    @GetMapping("/condition")
    public String condition(Model model) {

        List<PostClass> postClasses = new LinkedList<PostClass>();
        final Random random = new Random();
        List<WeatherData> weatherDataList = new ArrayList<>();
        City city = null;
        WeatherCondition weatherCondition = null;
        logger.info("condition function");
        for (int i = 0; i < 9; i++) { //(long)random.nextInt(209580)+1
            // Get city object from DB
            Optional<City> cityFromDB = citiesService.findById((long) random.nextInt(209580) + 1);
            if (cityFromDB.isPresent()) {
                city = cityFromDB.get();
            }
            else return "Error QQQQQ"; // TODO: Error window
            String weatherAPIURL = weatherURL + city.getCityID(); // Add City ID to construct a query
            WeatherJSON weatherJSON;
            try {
                weatherJSON = restTemplate.getForObject(weatherAPIURL, WeatherJSON.class); // Send weather API query
            } catch(RestClientException ex) {
                return "";
            }
            try {
                weatherCondition = conditionsRepository.findById((long) weatherJSON.getWeatherID()).get();
                weatherJSONRepository.save(weatherJSON);
            } catch (RuntimeException ex){
                System.out.println("qwerty");
            }

            WeatherData weatherData = new WeatherData(weatherJSON, weatherCondition);
            System.out.println(weatherData.getIconAddress());
            weatherDataList.add(weatherData);   //org.springframework.dao.DataIntegrityViolationException
        }

        model.addAttribute("weather", weatherDataList);
        System.out.println("condition");
        return "weather";
    }

}
